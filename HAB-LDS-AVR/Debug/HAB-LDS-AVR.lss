
HAB-LDS-AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 000000c0  00000000  00000000  00000a78  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a6c  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000028c  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000500  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000ac  00000000  00000000  00001d30  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000003fc  00000000  00000000  00001ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000001f  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
   8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
   c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  10:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  14:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  18:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  1c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  20:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  24:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  28:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  2c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  30:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  34:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  38:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  3c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  40:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  44:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  48:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  4c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  50:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  54:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  58:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  5c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  60:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  64:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  68:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  6c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  70:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  74:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  78:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  7c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  80:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  84:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  88:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  8c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  90:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  94:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  98:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  9c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  fc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 100:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 104:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 108:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 10c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 110:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 114:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 118:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 11c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 120:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 124:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 128:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 12c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 130:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 134:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 138:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 13c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 140:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 144:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 148:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 14c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 150:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 154:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 158:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 15c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 160:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 164:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 168:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 16c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 170:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 174:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 178:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 17c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 180:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 184:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 188:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 18c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 190:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 194:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 198:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 19c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	df e2       	ldi	r29, 0x2F	; 47
 204:	de bf       	out	0x3e, r29	; 62
 206:	cd bf       	out	0x3d, r28	; 61

00000208 <__do_copy_data>:
 208:	10 e2       	ldi	r17, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	ee ec       	ldi	r30, 0xCE	; 206
 210:	f2 e0       	ldi	r31, 0x02	; 2
 212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
 214:	05 90       	lpm	r0, Z+
 216:	0d 92       	st	X+, r0
 218:	a0 30       	cpi	r26, 0x00	; 0
 21a:	b1 07       	cpc	r27, r17
 21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
 21e:	10 e2       	ldi	r17, 0x20	; 32
 220:	a0 e0       	ldi	r26, 0x00	; 0
 222:	b0 e2       	ldi	r27, 0x20	; 32
 224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
 226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
 22e:	0e 94 3a 01 	call	0x274	; 0x274 <main>
 232:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <_exit>

00000236 <__bad_interrupt>:
 236:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023a <init_adc>:
#include "adc.h"

void init_adc( void ) {
	// Enable the Analog-to-Digital converter
	ADCA.CTRLA |= (1 << ADC_ENABLE_bp);
 23a:	e0 e0       	ldi	r30, 0x00	; 0
 23c:	f2 e0       	ldi	r31, 0x02	; 2
 23e:	80 81       	ld	r24, Z
 240:	81 60       	ori	r24, 0x01	; 1
 242:	80 83       	st	Z, r24

	// 
	ADCA.CTRLA |= (1 << ADC_ENABLE_bp);
 244:	80 81       	ld	r24, Z
 246:	81 60       	ori	r24, 0x01	; 1
 248:	80 83       	st	Z, r24

	// Set the resolution of the ADC to be 8-bit, right adjusted
	ADCA.CTRLB |= (1 << ADC_RESOLUTION1_bp);
 24a:	81 81       	ldd	r24, Z+1	; 0x01
 24c:	84 60       	ori	r24, 0x04	; 4
 24e:	81 83       	std	Z+1, r24	; 0x01
	ADCA.CTRLB &= ~(1 << ADC_RESOLUTION0_bp);
 250:	81 81       	ldd	r24, Z+1	; 0x01
 252:	8d 7f       	andi	r24, 0xFD	; 253
 254:	81 83       	std	Z+1, r24	; 0x01

	return;
}
 256:	08 95       	ret

00000258 <clock_init>:
}

// Set the chip to run on the 32MHz internal oscillator
void clock_init( void ) {
	// Start 32MHz RC oscillator
	OSC.CTRL = OSC_RC32MEN_bm;
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	80 93 50 00 	sts	0x0050, r24
	
	// Wait for ready
	while ( !(OSC.STATUS & OSC_RC32MRDY_bm) );	// Wait for ready
 25e:	e0 e5       	ldi	r30, 0x50	; 80
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	81 81       	ldd	r24, Z+1	; 0x01
 264:	81 ff       	sbrs	r24, 1
 266:	fd cf       	rjmp	.-6      	; 0x262 <clock_init+0xa>
	
	// Allow changing of CLK.CTRL
	CCP = CCP_IOREG_gc;
 268:	88 ed       	ldi	r24, 0xD8	; 216
 26a:	84 bf       	out	0x34, r24	; 52
	
	// Set system clock to 32MHz oscillator
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	80 93 40 00 	sts	0x0040, r24
 272:	08 95       	ret

00000274 <main>:
#include "HAB-LDS-AVR.h"

int main( void ) {
	clock_init();
 274:	0e 94 2c 01 	call	0x258	; 0x258 <clock_init>
	lcd_init();
 278:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_init>
 27c:	ff cf       	rjmp	.-2      	; 0x27c <main+0x8>

0000027e <USART_init>:
	
	// Set the TxD as output
	
	
	// Set the baud rate and frame format
	USARTC0.BAUDCTRLA |= ( 1 << 1 );
 27e:	e0 ea       	ldi	r30, 0xA0	; 160
 280:	f8 e0       	ldi	r31, 0x08	; 8
 282:	86 81       	ldd	r24, Z+6	; 0x06
 284:	82 60       	ori	r24, 0x02	; 2
 286:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB |= ( 1 << 1 );
 288:	87 81       	ldd	r24, Z+7	; 0x07
 28a:	82 60       	ori	r24, 0x02	; 2
 28c:	87 83       	std	Z+7, r24	; 0x07
	
	// Default Arduino USART frame is 8n1
	// Set the mode of operation

	// Set character size to 8-bits (011)
	USARTC0.CTRLC |= ( 1 << USART_CHSIZE0_bp );
 28e:	85 81       	ldd	r24, Z+5	; 0x05
 290:	81 60       	ori	r24, 0x01	; 1
 292:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.CTRLC |= ( 1 << USART_CHSIZE1_bp );
 294:	85 81       	ldd	r24, Z+5	; 0x05
 296:	82 60       	ori	r24, 0x02	; 2
 298:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.CTRLC &= ~( 1 << USART_CHSIZE2_bp );
 29a:	85 81       	ldd	r24, Z+5	; 0x05
 29c:	8b 7f       	andi	r24, 0xFB	; 251
 29e:	85 83       	std	Z+5, r24	; 0x05
	// Parity initialized to no parity (00)
	// Stop bits set to zero by default (0)
	
	// Enable the transmitter or the receiver

}
 2a0:	08 95       	ret

000002a2 <lcd_init>:

void lcd_init( void ) {
	
}
 2a2:	08 95       	ret

000002a4 <USARTC0_putchar>:

int USARTC0_putchar( char c ) {
	// Wait until the transmit register is empty
	while ( !(USARTC0.STATUS & USART_DREIF_bm) );
 2a4:	e0 ea       	ldi	r30, 0xA0	; 160
 2a6:	f8 e0       	ldi	r31, 0x08	; 8
 2a8:	91 81       	ldd	r25, Z+1	; 0x01
 2aa:	95 ff       	sbrs	r25, 5
 2ac:	fd cf       	rjmp	.-6      	; 0x2a8 <USARTC0_putchar+0x4>
	
	// Write the data
	USARTC0.DATA = c;
 2ae:	80 93 a0 08 	sts	0x08A0, r24
	
	return 0;
}
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	08 95       	ret

000002b8 <USARTC0_getchar>:

int USARTC0_getchar( void ) {
	
	// Wait until the Receive complete interrupt flag is set
	while ( !(USARTC0.STATUS & USART_RXCIF_bm) );
 2b8:	e0 ea       	ldi	r30, 0xA0	; 160
 2ba:	f8 e0       	ldi	r31, 0x08	; 8
 2bc:	81 81       	ldd	r24, Z+1	; 0x01
 2be:	88 23       	and	r24, r24
 2c0:	ec f7       	brge	.-6      	; 0x2bc <USARTC0_getchar+0x4>
	
	// Read the data
	int c = USARTC0.DATA;
 2c2:	80 91 a0 08 	lds	r24, 0x08A0
	
	return c;
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	08 95       	ret

000002ca <_exit>:
 2ca:	f8 94       	cli

000002cc <__stop_program>:
 2cc:	ff cf       	rjmp	.-2      	; 0x2cc <__stop_program>
